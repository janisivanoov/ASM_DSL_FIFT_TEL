{ ."Usage:" cr
  ."  " $0 type
    ." [ new"
    ." | mk-keypair"
    ." | wrap-msg"
    ." | sign-msg"
    ." | commit-signed-msg"
    ." ]" cr
    cr
    ."  Create a new multisig wallet:" cr
      ."    new"
      ." <multisig_contract_file>"
      ." <workchain_id>"
      ." <outfile_base>"
      ." <K>"
      ." <pk1>, <pk2>, ..., <pkN>"
      cr
      ."  Creates a new <K> out of <N> multisig contract using "
        ."<multisig_contract_file> as the contract source code, and "
        ."<pk1>, <pk2>, ..., <pkN> â€” as the eligible signers list. "
        ."Writes the output to <outfile_base>.boc." cr
    cr
    ."  Create a new keypair:" cr
      ."    mk-keypair"
      ." <key_base>"
      cr
      ."  Generates a new keypair and writes private and public "
        ."keys to <key_base>.prv and <key_base>.pub correspondingly." cr

    cr
    ."  Create a new message wrapped into a multisig envelope:" cr
      ."    mk-msg" cr
      ."        <message_base>"
      ." <expiration_timestamp>"
      ." <nonce>"
      ." <amount>" cr
      ."        <dst_address>"
      ." [<body_boc>"
      ." [<init_boc>]]"
      cr
      ."  Creates a new message with the given <amount>, <dst_address>, "
        ."and optionally message body and state init structure, wraps this "
        ."message into a multisig envelope with an <expiration_timestamp> "
        ."(unixtime), <nonce> and an empty signatures dict. Writes "
        ."the output to <message>.msig.boc." cr
      cr

    cr
    ."  Wrap an existing message into a multisig envelope:" cr
      ."    wrap-msg"
      ." <message_base>"
      ." <expiration_timestamp>"
      ." <nonce>"
      cr
      ."  Takes a message located at <message_base>.boc and wraps it "
        ."into a multisig envelope with an <expiration_timestamp> "
        ."(unixtime), <nonce> and an empty signatures dict. Writes "
        ."the output to <message>.msig.boc." cr
      cr

    cr
    ."  Sign an existing (wrapped) message:" cr
      ."    sign-msg"
      ." <message_base>"
      ." <multisig_addr>"
      ." <private_key_file>"
      cr
      ."  Takes a wrapped and possibly half-signed message located "
        ."at <message_base>.msig.boc and signs the message and the "
        ."<multisig_addr>, with the given private key taken from "
        ."<private_key_file>. Writes the output back to "
        ."<message_base>.msig.boc." cr
      cr

    cr
    ."  Commit a signed message:" cr
      ."    commit-signed-msg"
      ." <message_base>"
      ." <multisig_addr>"
      cr
      ."  Creates a query which, when sent to the multisig contract, "
        ."adds the signed message to the multisig order dict. If enough "
        ."signatures are present, the multisig contract sends the wrapped "
        ."message and removes it from the order dict." cr
      cr

  cr
} constant handlers_usage

{ "handlers/new.fif" include } : cli_new
{ "handlers/mk-keypair.fif" include } : cli_mk-keypair
{ "handlers/mk-msg.fif" include } : cli_mk-msg
{ "handlers/wrap-msg.fif" include } : cli_wrap-msg
{ "handlers/sign-msg.fif" include } : cli_sign-msg
{ "handlers/commit-signed-msg.fif" include } : cli_commit-signed-msg

